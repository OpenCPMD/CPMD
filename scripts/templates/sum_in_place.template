subroutine mp_sum_in_place_${NAME}(data,${ARG_LEN_NAME}, comm)
  implicit none
  ! Arguments
#ifdef __PARALLEL
  integer, intent(in) :: ${ARG_LEN_NAME} 
  type(MPI_COMM), intent(in) :: comm
#else
  integer, intent(in) :: ${ARG_LEN_NAME}, comm
#endif
  ${TYPE}${KIND}, intent(inout), target ${DIMENSION} :: data
  ! Variables
  ${TYPE}${KIND}, POINTER __CONTIGUOUS :: para_buff_user(:),data_ptr(:)
  TYPE(c_ptr) :: loc_x
  
  character(*),parameter :: procedureN='mp_sum_in_place_${NAME}'
  integer :: ierr,i
  real(real_8) :: tim1,tim2
#ifdef __PARALLEL
  cmcal(ipar_gsum)=cmcal(ipar_gsum)+1.0d0
  cmlen(ipar_gsum)=cmlen(ipar_gsum)+${MPI_LEN}*${SIZE_IN_BYTES}
  tim1=m_walltime()
  IF(para_use_mpi_in_place)THEN
     CALL mpi_allreduce(MPI_IN_PLACE,data,${MPI_LEN},${MPI_TYPE},&
          MPI_SUM,comm,ierr)
     CALL mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
  ELSE
#if !defined _USE_SCRATCHLIBRARY
     IF(.NOT.ALLOCATED(para_buff))THEN
        ALLOCATE(para_buff(il_para_buff(1)),ierr)
        IF(ierr/=0) CALL stopgm(procedureN,'cannot allocate para_buff', &
             __LINE__,__FILE__)
     END IF
#endif
     IF(${MPI_LEN}*${SIZE_IN_BYTES}.GT.buff_size_in_bytes*il_para_buff(1))THEN
        il_para_buff(1)=CEILING(REAL(${MPI_LEN}*${SIZE_IN_BYTES},real_8)/&
             buff_size_in_bytes)
#if !defined _USE_SCRATCHLIBRARY
        DEALLOCATE(para_buff,ierr)
        IF(ierr/=0) CALL stopgm(procedureN,'cannot deallocate para_buff', &
             __LINE__,__FILE__)
        ALLOCATE(para_buff(il_para_buff(1)),ierr)
        IF(ierr/=0) CALL stopgm(procedureN,'cannot allocate para_buff', &
             __LINE__,__FILE__)
#endif
     END IF
#ifdef _USE_SCRATCHLIBRARY
     CALL request_scratch(il_para_buff,para_buff,procedureN//'_para_buff',ierr)
     IF(ierr/=0) CALL stopgm(procedureN,'cannot allocate para_buff', &
          __LINE__,__FILE__)
#endif
     CALL mpi_allreduce(data,para_buff,${MPI_LEN},${MPI_TYPE},&
          MPI_SUM,comm,ierr)
     CALL mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
     loc_x = C_LOC(para_buff)
     CALL C_F_POINTER(loc_x, para_buff_user, (/${MPI_LEN}/))
     loc_x = C_LOC(data)
     CALL C_F_POINTER(loc_x, data_ptr, (/${MPI_LEN}/))
     !$omp parallel do simd
     do i=1,${MPI_LEN}
        data_ptr(i)=para_buff_user(i)
     end do
#ifdef _USE_SCRATCHLIBRARY
     CALL free_scratch(il_para_buff,para_buff,procedureN//'_para_buff',ierr)
     IF(ierr/=0) CALL stopgm(procedureN,'cannot deallocate para_buff', &
          __LINE__,__FILE__)
#endif
  END IF
  tim2=m_walltime()
  cmtim(ipar_gsum)=cmtim(ipar_gsum)+tim2-tim1
#endif
end subroutine mp_sum_in_place_${NAME}
